% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/subapply.R
\name{subapply}
\alias{subapply}
\alias{subapply.data.frame}
\title{Apply Function to Subsets of Data}
\usage{
subapply(x, index, .fun, ...)

\method{subapply}{data.frame}(x, index, .fun, y, longform = FALSE,
  sum.field = deparse(substitute(.fun)), ...)
}
\arguments{
\item{x}{A vector, data frame, of matrix of values evaluate.}

\item{index}{If \code{x} is a vector, the sub-setting index of same length
as \code{x}. If \code{x} is a data frame, a character string indicating the
column name(s) in \code{x} to use as indices. Character string currently
cannot be more than length 2.}

\item{.fun}{The function to apply to each subset of the data. Can be
written on the fly using the \code{function(x)} syntax.}

\item{...}{Additional arguments passed to \code{\link{tapply}}}

\item{y}{Character. Only used if \code{x} is a data frame, then a character
string corresponding to a column name in \code{x}.}

\item{longform}{Alternative version of output for the returned value.
Returns a table.}

\item{sum.field}{Character. The summary field column name in the
returned data frame that summarizes the function called upon each
subset of the data. Ignored if \code{longform=FALSE}.}
}
\value{
A data frame with summary data, and the result of the applied
function.
}
\description{
Apply a function, written on the fly (\code{.fun}), to the subsets of data
determined by an appropriate subsetting variable (column)
If the \code{x} is a vector, the \code{index} argument must
be of the same length as \code{x}, and the function reduces to a simple
\code{\link{tapply}}. If \code{x} is a data frame, then \code{y} must be
supplied and corresponds to a column in \code{x}.
}
\details{
THIS FUNCTION WILL EVENTUALLY BE REPLACED BY \code{\link[dplyr]{summarise}}.
}
\examples{

# S3 numeric
subapply(test_data$z, index = test_data$Sample, .fun = mean)

# S3 character
set.seed(10)
y <- sample(LETTERS, 10, replace=TRUE)
subapply(y, rep("a",length(y)), duplicated)

# S3 data.frame
subapply(test_data, index = "Sample", .fun = mean, y = "z")  # same as above

# cross tabulated
subapply(test_data, c("Sample", "Response"), .fun = mean, y = "z")

# cross tabulated long-format
subapply(test_data, index = c("Sample","Response"), .fun = mean, y = "z",
         longform = TRUE, sum.field = "Mean")

# S3 matrix
test_data$Sample \%<>\% as.numeric
m <- test_data[, c(1, 3, 11)] \%>\% data.matrix
subapply(m, index = "Sample", .fun = mean, y = "z", longform = TRUE) # same as data.frame

}
\seealso{
\code{\link{tapply}}, \code{\link[dplyr]{select}}
}
\author{
Stu Field
}
