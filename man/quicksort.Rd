% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/quicksort.R
\name{quicksort}
\alias{quicksort}
\title{Quick Sort Algorithm}
\source{
\url{https://en.wikipedia.org/wiki/Quicksort}
}
\usage{
quicksort(x)
}
\arguments{
\item{x}{An vector to be sorted via the quick-sort algorithm.}
}
\value{
A sorted vector or \code{x}.
}
\description{
The quick-sort algorithm is a computer science "divide-and-conquer" algorithm
used here as a applied example of recursion.
Sometimes called partition-exchange sort, is an efficient sorting algorithm.
Developed by British computer scientist Tony Hoare in 1959 and published
in 1961, it is still a commonly used algorithm for sorting.
When implemented well, it can be about two or three times faster than its
main competitors, \code{merge-sort} and \code{heapsort}.
}
\details{
It works by selecting a 'pivot' element from the array and partitioning
the other elements into two sub-arrays, according to whether they are less
than or greater than the pivot. The sub-arrays are then sorted recursively.
This can be done in-place, requiring small additional amounts of memory
to perform the sorting.
}
\examples{
set.seed(101)
x <- sample(LETTERS)
quicksort(x)

# numeric x; compared to `base::sort()`
# this implementation is *much* slower
y <- sample(1:1000)
bench::mark(
  base      = sort(y),
  quicksort = quicksort(y)
)
}
\references{
tony Hoare (1959).
}
